import java.security.MessageDigest

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'signing'
group = 'com.sysgears.grain'
version = '0.6.0-SNAPSHOT'
defaultTasks 'build'

def mainClassName = 'com.sysgears.grain.Main'
def compatibilityVersion = 1.6
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.eclipse.jgit:org.eclipse.jgit:3.1.0.201310021548-r' }
}

ext {
    title = 'Grain Static Website Building Framework'
    url = 'http://www.sysgears.com/grain'
    licenseName = 'Apache License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    localGHPagesRepoDir = '../grain.gh-pages'
    localGHPagesRepoCanonicalPath = new File(localGHPagesRepoDir).canonicalPath
}

configurations.all {
    exclude group: 'commons-logging'
}

configurations {
    deployerJars
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.sysgears.com/releases/'
    }
}

dependencies {
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.5.2') {
        exclude module: 'groovy'
    }
    compile 'net.sf.jpathwatch:jpathwatch:0.95'
    compile 'org.eclipse.jetty:jetty-server:8.1.8.v20121106'
    compile 'org.eclipse.jetty:jetty-servlet:8.1.8.v20121106'
    compile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'org.yaml:snakeyaml:1.11'
    compile 'org.codehaus.gpars:gpars:1.0.0'
    compile 'com.github.rjeschke:txtmark:0.9'
    compile 'org.python:jython-standalone:2.7-b1'
    compile 'org.jruby:jruby-core:1.7.10'
    compile 'org.jruby:jruby-stdlib:1.7.10'
    compile 'com.googlecode.htmlcompressor:htmlcompressor:1.5.2'
    compile('com.yahoo.platform.yui:yuicompressor:2.4.7') {
        exclude group: 'rhino'
    }
    compile 'commons-io:commons-io:2.4'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.codehaus.groovy:groovy-xml:2.1.2'
    compile 'org.jsoup:jsoup:1.7.2'
    compile('ch.qos.logback:logback-classic:1.0.13') {
        exclude group: 'org.slf4j'
    }
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'

    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'

    compile 'com.google.inject:guice:4.0-beta'
    compile 'com.google.inject.extensions:guice-assistedinject:4.0-beta'

    compile 'javax.inject:javax.inject:1'
    
    compile 'org.pegdown:pegdown:1.4.2'
    
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }
    testCompile('org.spockframework:spock-guice:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }

    compile 'org.codehaus.groovy:groovy:2.2.1'

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }
    }
}

signing {
    sign configurations.archives
}

task getToolsMD5Checksum {
    def md5 = MessageDigest.getInstance('MD5')
    file('tools').eachFileRecurse { file ->
        if (file.isFile()) {
            md5.update(file.bytes)
        }
    }
    def messageDigest = md5.digest()
    def sb = new StringBuilder()
    messageDigest.each {
        sb.append(String.format('%02x', it))
    }
    project.ext.toolsMD5 = sb.toString()
}

task createSharedManifest(dependsOn: getToolsMD5Checksum) {
    project.ext.sharedManifest = manifest {
        attributes 'Implementation-Title': project.title,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Rev': project.toolsMD5,
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
    from(project.rootProject.projectDir) {
        include 'tools/**'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from(sourceSets.main.allSource) {
        exclude 'logback.xml'
    }
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives groovydocJar
    archives jar
}

ext.pomConfiguration = {
    name project.title
    description '''Grain is a static web site building framework for Groovy that makes demanding static web site
            implementation an intuitive and enjoyable task to do.'''
    url project.url
    inceptionYear '2013'

    scm {
        url 'https://github.com/sysgears/grain'
        connection 'scm:https://github.com/sysgears/grain.git'
        developerConnection 'scm:git@github.com:sysgears/grain.git'
    }

    licenses {
        license {
            name project.licenseName
            url project.licenseUrl
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'sysgears'
            name 'SysGears LLC'
            email 'info@sysgears.com'
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        configuration = configurations.deployerJars
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
        pom.project(pomConfiguration)
    }
}

idea {
    module {
        excludeDirs = ['.idea', '.gradle', 'build'].collect { file(it) }
    }
}
