import java.security.MessageDigest

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'ivy-publish'
group = 'com.sysgears.grain'
version = '1.0'
defaultTasks 'clean', 'build', 'createAllDeliverables'

def mainClassName = 'com.sysgears.grain.Main'
def compatibilityVersion = 1.5
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.eclipse.jgit:org.eclipse.jgit:3.1.0.201310021548-r' }
}

configurations.all {
    exclude group: 'commons-logging'
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.5.2') {
        exclude module: 'groovy'
    }
    compile 'net.sf.jpathwatch:jpathwatch:0.95'
    compile 'org.eclipse.jetty:jetty-server:8.1.8.v20121106'
    compile 'org.eclipse.jetty:jetty-servlet:8.1.8.v20121106'
    compile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'org.yaml:snakeyaml:1.11'
    compile 'org.codehaus.gpars:gpars:1.0.0'
    compile 'com.github.rjeschke:txtmark:0.9'
    compile 'org.python:jython-standalone:2.7-b1'
    compile 'org.jruby:jruby-complete:1.7.4'
    compile 'com.googlecode.htmlcompressor:htmlcompressor:1.5.2'
    compile('com.yahoo.platform.yui:yuicompressor:2.4.7') {
        exclude group: 'rhino'
    }
    compile 'commons-io:commons-io:2.4'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.codehaus.groovy:groovy-xml:2.1.2'
    compile 'org.jsoup:jsoup:1.7.2'
    compile('ch.qos.logback:logback-classic:1.0.13') {
        exclude group: 'org.slf4j'
    }
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'

    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'

    compile "com.google.inject:guice:4.0-beta"
    compile "com.google.inject.extensions:guice-assistedinject:4.0-beta"

    compile "javax.inject:javax.inject:1"

    testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
        exclude module: 'groovy-all'
    }
    testCompile("org.spockframework:spock-guice:0.7-groovy-2.0") {
        exclude module: 'groovy-all'
    }

    compile 'org.codehaus.groovy:groovy:2.1.2'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'themes/octopress/theme/src']
        }
    }
}

task getVendorMD5Checksum {
    def md5 = MessageDigest.getInstance('MD5')
    new File("vendor/").eachFileRecurse { file ->
        if (file.isFile()) {
            md5.update(file.bytes)
        }
    }
    def messageDigest = md5.digest()
    def sb = new StringBuilder()
    messageDigest.each {
        sb.append(String.format('%02x', it))
    }
    project.ext.vendorMD5 = sb.toString()
}

task createSharedManifest(dependsOn: getVendorMD5Checksum) {
    project.ext.sharedManifest = manifest {
        attributes 'Implementation-Title': 'Grain Static Website Building Framework',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Rev': project.ext.vendorMD5,
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }
}

task uberJar(type: Jar, dependsOn: [':compileJava', ':compileGroovy', createSharedManifest]) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from(project.rootProject.projectDir) {
        include "vendor/**"
    }
    from(configurations.runtime.asFileTree.files.collect { zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest = project.manifest {
        from sharedManifest
    }
    baseName = "$project.rootProject.name-standalone"
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
    from(project.rootProject.projectDir) {
        include "vendor/**"
    }
}

artifacts {
    archives uberJar
}

publishing {
    publications {
        grain(IvyPublication) {
            organisation group
            module project.rootProject.name
            from components.java
            artifacts = [sourcesJar, javadocJar, jar]
        }
        'grain-standalone'(IvyPublication) {
            organisation group
            module "$project.rootProject.name-standalone"
            revision version
            artifact uberJar
        }
    }
    repositories {
        ivy {
            url 'ivy/'
            name 'local-grain-repo'
        }
    }
}

task createAllDeliverables(dependsOn: [jar, publish]) {
    description = 'Creates all deliverables.'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from(sourceSets.main.allSource) {
        exclude 'logback.xml'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext.pomConfiguration = {
    name 'Grain Static Website Building Framework'
    description 'Grain is a static web site building framework for Groovy that makes demanding static web site implementation an intuitive and enjoyable task to do.'
    url 'http://sysgears.com/products/grain'
    inceptionYear '2013'

    scm {
        url 'https://github.com/sysgears/grain'
        connection 'scm:https://github.com/sysgears/grain.git'
        developerConnection 'scm:git://github.com/sysgears/grain.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'sysgears'
            name 'SysGears LLC'
            email 'info@sysgears.com'
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project pomConfiguration
    }
}

idea {
    module {
        excludeDirs = [".cache", ".idea", ".gradle", ".nb-gradle", ".settings", "bin", "out", "target"].
                collect { [file(it), file("themes/octopress/${it}")] }.flatten()
    }
}
