apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
group = 'com.sysgears.grain'
version = '1.0'
defaultTasks 'clean', 'build', 'createAllDeliverables'

def mainClassName = 'com.sysgears.grain.Main'
def compatibilityVersion = 1.5
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

configurations.all {
    exclude group: 'commons-logging'
}

repositories {
    mavenCentral()
}

dependencies {
     compile('org.codehaus.groovy.modules.http-builder:http-builder:0.5.2') {
       exclude module: 'groovy'
     }
     compile 'net.sf.jpathwatch:jpathwatch:0.95'
     compile 'org.eclipse.jetty:jetty-server:8.1.8.v20121106'
     compile 'org.eclipse.jetty:jetty-servlet:8.1.8.v20121106'
     compile 'javax.servlet:javax.servlet-api:3.0.1'
     compile 'org.yaml:snakeyaml:1.11'
     compile 'org.codehaus.gpars:gpars:1.0.0'
     compile 'com.github.rjeschke:txtmark:0.9'
     compile 'org.python:jython-standalone:2.7-b1'
     compile 'org.jruby:jruby-complete:1.7.4'
     compile 'com.googlecode.htmlcompressor:htmlcompressor:1.5.2'
     compile('com.yahoo.platform.yui:yuicompressor:2.4.7') {
         exclude group: 'rhino'
     }
     compile 'commons-io:commons-io:2.4'
     compile 'commons-cli:commons-cli:1.2'
     compile 'org.codehaus.groovy:groovy-xml:2.1.2'
     compile 'org.jsoup:jsoup:1.7.2'
     compile('ch.qos.logback:logback-classic:1.0.13') {
         exclude group: 'org.slf4j'
     }
     compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    
     compile 'oauth.signpost:signpost-core:1.2.1.2'
     compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
     
     compile "com.google.inject:guice:4.0-beta"
     compile "com.google.inject.extensions:guice-assistedinject:4.0-beta"
    
     compile "javax.inject:javax.inject:1"

     testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
         exclude module: 'groovy-all'
     }
     testCompile("org.spockframework:spock-guice:0.7-groovy-2.0") {
         exclude module: 'groovy-all'
     }
    
     groovy 'org.codehaus.groovy:groovy:2.1.2'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Grain Static Website Generator',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }
}

task uberJar(type: Jar,dependsOn:[':compileJava',':compileGroovy']) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from(configurations.runtime.asFileTree.files.collect { zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes 'Implementation-Title': 'Grain Static Website Generator',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }

}

task createAllDeliverables(dependsOn: [uberJar]) {
    description = 'Creates all deliverables.'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}

task "install-theme" << {
	description = 'Copies theme files from themes directory (site name and theme name are required)'
	if (!site || !theme) {
		println "Example usage: gradlew install-theme -Psite=example.com -Ptheme=classic"
	} else {
		println "Copying theme files to $rootDir/$site directory..."
		ant.copy(todir: "$rootDir/$site/sass", overwrite: true) {
			fileset(dir: "$rootDir/.themes/$theme/sass")
		}
		ant.copy(todir: "$rootDir/$site", overwrite: true) {
			fileset(dir: "$rootDir/.themes/$theme/source")
		}
		println "Successfully installed theme: $theme"
	}
}

artifacts {
    archives uberJar
}

ext.pomConfiguration = {
    name 'Grain Static Website Generator'
    description 'Static Website Generator that allows to use Groovy as scripting language.'
    url 'http://sysgears.com/products/grain'
    inceptionYear '2013'

    scm {
        url 'https://github.com/sysgears/grain'
        connection 'scm:https://vlasenko@github.com/sysgears/grain.git'
        developerConnection 'scm:git://github.com/sysgears/grain.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'sysgears'
            name 'SysGears company'
            email 'info@sysgears.com'
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project pomConfiguration
    }
}

if(hasProperty('nexusUsername') && hasProperty('nexusPassword')) {
    apply plugin: 'signing'

    signing {
        required { gradle.taskGraph.hasTask(uploadArchives) && !version.endsWith('SNAPSHOT') }
        sign configurations.archives
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }

            name = 'mavenCentralReleaseDeployer'

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: nexusUsername, password: nexusPassword)
                releases(updatePolicy: 'always')
            }

            pom.project pomConfiguration
        }
    }
}

idea.project {
    jdkName = '1.7'

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
    }
}